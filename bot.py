from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import asyncio
from datetime import datetime
import os
import sys

TOKEN = "8432034617:AAFBROdOxySAe6opmCEGhDLGTXCpymjlFYY"
ADMIN_ID = 1197348954  # <-- —Ç–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}  # user_id -> {"times": ["08:00", "12:00"], "taken_today": {"08:00": False}}

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è")],
        [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
        [KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]
    ],
    resize_keyboard=True
)

# Inline –∫–Ω–æ–ø–∫–∞ "–Ø –≤—ã–ø–∏–ª(-–∞)"
button_taken = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–Ø –≤—ã–ø–∏–ª(-–∞)", callback_data="taken")]]
)

# ====== /start ======
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ –≤–∏—Ç–∞–º–∏–Ω—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=main_keyboard
    )

# ====== –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ======
@dp.message()
async def handle_buttons(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if text == "–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30).")
    elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        if user_id in users and users[user_id]["times"]:
            times = ", ".join(users[user_id]["times"])
            await message.answer(f"–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {times}")
        else:
            await message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    elif text == "–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await show_delete_buttons(user_id, message)
    elif text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await show_edit_buttons(user_id, message)
    elif text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞":
        if user_id == ADMIN_ID:
            await message.answer("‚ôªÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            os.execv(sys.executable, [sys.executable] + sys.argv)
        else:
            await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤—Ä–µ–º—è
        try:
            datetime.strptime(text, "%H:%M")
            if user_id not in users:
                users[user_id] = {"times": [], "taken_today": {}}
            if text not in users[user_id]["times"]:
                users[user_id]["times"].append(text)
                users[user_id]["taken_today"][text] = False
            await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {text}")
        except ValueError:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ HH:MM.")

# ====== Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è ======
async def show_delete_buttons(user_id, message):
    if user_id not in users or not users[user_id]["times"]:
        await message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=t, callback_data=f"del_{t}")] for t in users[user_id]["times"]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("del_"))
async def delete_reminder(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    time_to_del = callback.data[4:]
    if user_id in users and time_to_del in users[user_id]["times"]:
        users[user_id]["times"].remove(time_to_del)
        users[user_id]["taken_today"].pop(time_to_del, None)
        await callback.message.edit_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {time_to_del} —É–¥–∞–ª–µ–Ω–æ ‚úÖ")
        await callback.answer()
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.", show_alert=True)

# ====== Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ======
async def show_edit_buttons(user_id, message):
    if user_id not in users or not users[user_id]["times"]:
        await message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=t, callback_data=f"edit_{t}")] for t in users[user_id]["times"]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_reminder(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    time_to_edit = callback.data[5:]
    await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {time_to_edit} –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state (–≤—Ä–µ–º–µ–Ω–Ω–æ) —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —ç—Ç–æ –≤—Ä–µ–º—è
    if 'edit_state' not in users[user_id]:
        users[user_id]['edit_state'] = {}
    users[user_id]['edit_state']['old_time'] = time_to_edit
    await callback.answer()

# ====== –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ======
@dp.message()
async def edit_time_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in users and 'edit_state' in users[user_id] and 'old_time' in users[user_id]['edit_state']:
        old_time = users[user_id]['edit_state']['old_time']
        new_time = message.text
        try:
            datetime.strptime(new_time, "%H:%M")
            # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤—Ä–µ–º—è –Ω–æ–≤—ã–º
            index = users[user_id]['times'].index(old_time)
            users[user_id]['times'][index] = new_time
            users[user_id]['taken_today'].pop(old_time, None)
            users[user_id]['taken_today'][new_time] = False
            # –£–¥–∞–ª—è–µ–º state
            users[user_id].pop('edit_state', None)
            await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {old_time} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_time} ‚úÖ", reply_markup=main_keyboard)
        except ValueError:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ HH:MM.")
        return

# ====== Inline –∫–Ω–æ–ø–∫–∞ "–Ø –≤—ã–ø–∏–ª(-–∞)" ======
@dp.callback_query(lambda c: c.data == "taken")
async def taken_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    msg_time = callback.message.date.strftime("%H:%M")
    if user_id in users:
        for t in users[user_id]["times"]:
            if not users[user_id]["taken_today"][t] and abs(datetime.strptime(t, "%H:%M") - datetime.strptime(msg_time, "%H:%M")).seconds < 60:
                users[user_id]["taken_today"][t] = True
                await callback.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ! üíä –¢—ã –ø—Ä–∏–Ω—è–ª(-–∞) –≤–∏—Ç–∞–º–∏–Ω—ã –Ω–∞ {t} —Å–µ–≥–æ–¥–Ω—è.")
                await callback.answer()
                return
        await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ.")

# ====== –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ======
async def send_reminders():
    while True:
        now = datetime.now().strftime("%H:%M")
        for user_id, data in users.items():
            for t in data["times"]:
                if t == now and not data["taken_today"][t]:
                    try:
                        await bot.send_message(user_id, f"üíä –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã ({t})!", reply_markup=button_taken)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        if now == "00:00":
            for user_id in users:
                for t in users[user_id]["times"]:
                    users[user_id]["taken_today"][t] = False
        await asyncio.sleep(60)

# ====== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ======
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.create_task(send_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health-—á–µ–∫–æ–≤ –æ—Ç Render ---
async def health_check(request):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ HTTP-–∑–∞–ø—Ä–æ—Å—ã Render,
    –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤.
    """
    return web.Response(text="I am alive!")

async def start_bot_and_server(bot: Bot, dispatcher: Dispatcher):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –±–æ—Ç–∞ (–≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞), –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.
    """
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_get('/', health_check) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à health-—á–µ–∫

    # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    # –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç (–ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫), –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080
    port = int(os.getenv('PORT', 8080))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    
    # –ó–∞–¥–∞—á–∏ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    bot_task = asyncio.create_task(dispatcher.start_polling(bot))
    server_task = asyncio.create_task(site.start())

    logging.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –∑–∞–¥–∞—á
    await asyncio.gather(bot_task, server_task)


async def main():
    if not TOKEN:
        logging.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    bot = Bot(token=TOKEN)
    await start_bot_and_server(bot, dp)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
